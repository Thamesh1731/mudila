import streamlit as st
from dotenv import load_dotenv
import os
import openai
from diffusers import StableDiffusionPipeline
import torch

load_dotenv()
openai.api_key = os.getenv("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")  # Ensure your .env has the correct key

# Function to generate AI-based images using OpenAI DALL-E
def generate_images_using_openai(text):
    try:
        response = openai.Image.create(prompt=text, n=1, size="512x512")
        image_url = response['data'][0]['url']
        return image_url
    except Exception as e:
        st.error(f"Error generating image with DALL-E: {e}")
        return None

# Function to load Huggingface pipeline (cached)
@st.cache_resource
def load_huggingface_pipeline():
    try:
        pipe = StableDiffusionPipeline.from_pretrained("runwayml/stable-diffusion-v1-5", torch_dtype=torch.float16)
        return pipe.to("cpu")  # Change to "cpu" for testing
    except Exception as e:
        st.error(f"Error loading Huggingface model: {e}")
        return None

# Function to generate AI-based images using Huggingface Diffusers
def generate_images_using_huggingface_diffusers(text):
    pipe = load_huggingface_pipeline()
    if pipe is None:
        return None  # Exit if model loading failed

    try:
        image = pipe(text).images[0]
        return image
    except Exception as e:
        st.error(f"Error generating image with Huggingface Diffusers: {e}")
        return None

# Streamlit Code
st.title("AI Image Generation App")
choice = st.sidebar.selectbox("Select your choice", ["Home", "DALL-E", "Huggingface Diffusers"])

if choice == "Home":
    st.write("This is a simple image generation app that uses AI to generate images from a text prompt.")

elif choice == "DALL-E":
    st.subheader("Image generation using Open AI's DALL-E")
    input_prompt = st.text_input("Enter your text prompt")
    if st.button("Generate Image"):
        if input_prompt:
            image_url = generate_images_using_openai(input_prompt)
            if image_url:
                st.image(image_url, caption="Generated by DALL-E")
                st.text_input("Enter your text prompt", value='', key='new_prompt')  # Clear input

elif choice == "Huggingface Diffusers":
    st.subheader("Image generation using Huggingface Diffusers")
    input_prompt = st.text_input("Enter your text prompt")
    if st.button("Generate Image"):
        if input_prompt:
            with st.spinner("Generating image..."):
                image_output = generate_images_using_huggingface_diffusers(input_prompt)
                if image_output is not None:
                    st.success("Image Generated Successfully")
                    st.image(image_output, caption="Generated by Huggingface Diffusers")
                    st.text_input("Enter your text prompt", value='', key='new_prompt')  # Clear input
